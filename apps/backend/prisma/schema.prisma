generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  xp            Int      @default(0)
  level         Int      @default(1)
  coins         Int      @default(0)
  created_at    DateTime @default(now())
  farm          Farm?
  quests        Quest[]
  userQuests    UserQuest[]
}

model Farm {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  level       Int      @default(1)
  xp          Int      @default(0)
  coins       Int      @default(0)
  cornLevel   Int      @default(1)
  barnLevel   Int      @default(1)
  treeLevel   Int      @default(1)
  npcLevel    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quest {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  elementId   String
  difficulty  Int      @default(1)
  xp_reward   Int      @default(0)
  coins_reward Int     @default(0)
  isAvailable Boolean  @default(true)
  isActive    Boolean  @default(false)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  userQuests  UserQuest[]
}

model UserQuest {
  userId    String
  questId   String
  status    String   // "En cours", "Réussi", "Échec"
  attempts  Int
  createdAt DateTime @default(now())
  repoUrl   String?  // URL du repo GitHub pour la quête (si créé)
  
  user      User     @relation(fields: [userId], references: [id])
  quest     Quest    @relation(fields: [questId], references: [id])
  
  @@id([userId, questId])  // Composite primary key
}

